import { useCallback, useMemo } from 'react';
import { CountryCode, LanguageCode, } from '../../storefront-api-types.js';
import { CartAttributesUpdate, CartBuyerIdentityUpdate, CartCreate, CartDiscountCodesUpdate, CartLineAdd, CartLineRemove, CartLineUpdate, CartNoteUpdate, CartQuery, } from './cart-queries.js';
import { useCartFetch } from './hooks.client.js';
/**
 * The `useCartActions` hook returns helper graphql functions for Storefront Cart API
 *
 * See [cart API graphql mutations](https://shopify.dev/api/storefront/2022-07/objects/Cart)
 */
export function useCartActions({ numCartLines, cartFragment, countryCode = CountryCode.Us, languageCode = LanguageCode.En, }) {
    const fetchCart = useCartFetch();
    const cartFetch = useCallback((cartId) => {
        return fetchCart({
            query: CartQuery(cartFragment),
            variables: {
                id: cartId,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [fetchCart, cartFragment, numCartLines, countryCode, languageCode]);
    const cartCreate = useCallback((cart) => {
        return fetchCart({
            query: CartCreate(cartFragment),
            variables: {
                input: cart,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const cartLineAdd = useCallback((cartId, lines) => {
        return fetchCart({
            query: CartLineAdd(cartFragment),
            variables: {
                cartId,
                lines,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const cartLineUpdate = useCallback((cartId, lines) => {
        return fetchCart({
            query: CartLineUpdate(cartFragment),
            variables: {
                cartId,
                lines,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const cartLineRemove = useCallback((cartId, lines) => {
        return fetchCart({
            query: CartLineRemove(cartFragment),
            variables: {
                cartId,
                lines,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const noteUpdate = useCallback((cartId, note) => {
        return fetchCart({
            query: CartNoteUpdate(cartFragment),
            variables: {
                cartId,
                note,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [fetchCart, cartFragment, numCartLines, countryCode, languageCode]);
    const buyerIdentityUpdate = useCallback((cartId, buyerIdentity) => {
        return fetchCart({
            query: CartBuyerIdentityUpdate(cartFragment),
            variables: {
                cartId,
                buyerIdentity,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const cartAttributesUpdate = useCallback((cartId, attributes) => {
        return fetchCart({
            query: CartAttributesUpdate(cartFragment),
            variables: {
                cartId,
                attributes,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    const discountCodesUpdate = useCallback((cartId, discountCodes) => {
        return fetchCart({
            query: CartDiscountCodesUpdate(cartFragment),
            variables: {
                cartId,
                discountCodes,
                numCartLines,
                country: countryCode,
                language: languageCode,
            },
        });
    }, [cartFragment, countryCode, fetchCart, numCartLines, languageCode]);
    return useMemo(() => ({
        cartFetch,
        cartCreate,
        cartLineAdd,
        cartLineUpdate,
        cartLineRemove,
        noteUpdate,
        buyerIdentityUpdate,
        cartAttributesUpdate,
        discountCodesUpdate,
        cartFragment,
    }), [
        cartFetch,
        cartCreate,
        cartLineAdd,
        cartLineUpdate,
        cartLineRemove,
        noteUpdate,
        buyerIdentityUpdate,
        cartAttributesUpdate,
        discountCodesUpdate,
        cartFragment,
    ]);
}
